<?xml version="1.0" encoding="UTF-8"?>

<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds"
	debug="false">
	<!--配置规则类的位置 -->

	<timestamp key="bySecond" datePattern="yyyyMMdd-HHmmss"/> 
    <contextName>${bySecond}</contextName> 

	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
	<property name="LOG_HOME" value="/Users/vinlam/logs/logback" />
	<!-- %.-1level 只显示信息级别的首字母,%-5level 左对齐显示信息级别全称 -->
	<property name="PATTERN"
		value="[%contextName][%date{yyyy-MM-dd HH:mm:ss.SSS}] [%X{Ip}] [%thread] [%X{requestId}] [%X{TraceId}] [%line] [%-5level] --%mdc{client} %msg%n"></property>
	<!-- 日志输出格式 -->

	<!-- 控制台输出 -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender">
		<!-- <encoder> -->
		<!-- <Pattern>${PATTERN}</Pattern> -->
		<!-- </encoder> -->
		<layout class="com.util.MyLogPatternLayout">
			<!-- <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %ip [%thread] %-5level %logger{36} 
				-%msg%n</Pattern> -->
			<Pattern>[${bySecond}][%HostName][%date{yyyy-MM-dd HH:mm:ss.SSS}] [%X{Ip}]
				[%thread] [%X{requestId}] [%X{TraceId}] [%method] [%line] [%-5level]
				[%logger{36}] --%mdc{client} %msg%n"</Pattern>
		</layout>
	</appender>
	<!-- 每天生成日志文件,文件大小超过50则新生成一个文件，同时将旧文件按${LOG_HOME}/logs/aa.%d{yyyy-MM-dd}.%i.log.zip格式压缩，文件保存30天 -->
	<appender name="runtime"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 日志名称 -->
		<file>${LOG_HOME}/logs/${HostName}.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy"> -->

			<fileNamePattern>${LOG_HOME}/logs/${HostName}.%d{yyyyMMddHHmm}.log
			</fileNamePattern>

			<!-- 原来前面路径中的%d{}中需要加一个aux，来表明它是用来辅助的，最后配成了这个样子实现了原来的目的 -->
			<!-- <fileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd,aux}/xxx.%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern> -->
			<!-- <fileNamePattern>${LOG_HOME}/logs/runtime.%d{yyyy-MM-dd}.%i.log.zip -->
			<!-- </fileNamePattern> -->
<!-- 			每1分钟生成一个文件 -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="com.common.component.MyTimeBasedFileNamingAndTriggeringPolicy">
				<multiple>1</multiple>
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxFileSize>50MB</maxFileSize>  <!-- 日志文件过大会使的编辑器打开非常慢，因此设置日志最大50MB -->
			<maxHistory>30</maxHistory>  <!-- 保存30天 -->
			<totalSizeCap>1GB</totalSizeCap>  <!-- 总日志大小 -->
		</rollingPolicy>
		<!-- encoder负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。 -->
		<!-- <encoder> -->
		<!-- <pattern>${PATTERN}</pattern> -->
		<!-- </encoder> -->

		<layout class="com.util.MyLogPatternLayout">
			<!-- <Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %ip [%thread] %-5level %logger{36} 
				-%msg%n</Pattern> -->
			<Pattern>[%HostName][%d{yyyy-MM-dd HH:mm:ss.SSS}] [%X{Ip}] [%thread]
				[%X{requestId}] [%X{TraceId}] [%method] [%line] [%-5level]
				--%mdc{client} %msg%n%rEx"</Pattern>
		</layout>
		<!-- 过滤器，可以过滤掉不符合条件的日志，INFO及以上的日志被处理，其它的拒绝 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="logrulesecond"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/info.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<!-- 索引最小值，标识%i从1开始 -->
<!-- 			<minIndex>1</minIndex> -->
			<!-- 索引最大值，标识%i到5结束，始终保留了5个归档文件 -->
<!-- 			<maxIndex>5</maxIndex> -->
<!-- 			<fileNamePattern>${LOG_HOME}/logs/info.%d{yyyy-MM-dd}.%i.log.zip -->
			<fileNamePattern>${LOG_HOME}/logs/info.%d{yyyy-MM-dd}.log.zip
			</fileNamePattern>
			<maxFileSize>50MB</maxFileSize>
			<maxHistory>30</maxHistory>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>${PATTERN}</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="update"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_HOME}/update.log</file>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/logs/update.%d{yyyy-MM-dd}.log.zip
			</fileNamePattern>
			<maxFileSize>50KB</maxFileSize>
			<maxHistory>7</maxHistory>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>${PATTERN}</pattern>
		</encoder>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<appender name="errorlog"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- <filter class="ch.qos.logback.classic.filter.LevelFilter"> -->
		<!-- <level>WARN</level> -->
		<!-- <onMatch>DENY</onMatch> -->
		<!-- <onMismatch>NEUTRAL</onMismatch> -->
		<!-- </filter> -->

		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
			<level>ERROR</level>
			<!-- <onMatch>DENY</onMatch> -->
			<!-- <onMismatch>NEUTRAL</onMismatch> -->
		</filter>
		<rollingPolicy
			class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${LOG_HOME}/logs/error.%d{yyyy-MM-dd}.log.zip
			</fileNamePattern>
			<maxFileSize>50KB</maxFileSize>
			<maxHistory>7</maxHistory>
			<totalSizeCap>1GB</totalSizeCap>
		</rollingPolicy>
		<file>${LOG_HOME}/error.log</file>
		<append>false</append>
		<encoder>
			<pattern>${PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- java项目中com.example.demo包下通过LoggerFactory.getLogger(Demo.class)获取的日志全部由runtime 
		appender处理 -->
	<!-- <logger name="com" additivity="false"> -->
	<!-- <appender-ref ref="runtime" /> -->
	<!-- </logger> -->
	<!-- java项目中com.example.demo包下通过LoggerFactory.getLogger(Demo2.class)获取的日志全部由logrulesecond 
		appender处理 -->
	<logger name="com.controller">
		<appender-ref ref="logrulesecond" />
	</logger>
	<!-- java项目中任意类中通过LoggerFactory.getLogger("update")获取的日志全部由update appender处理 
		, 例如想把所有的更新操作的日志放在一起，便于查看 -->
	<logger name="update">
		<appender-ref ref="update" />
	</logger>
	
<!-- 	<logger name="org.springframework.jms.connection" level="ERROR" /> -->
	<!-- <logger name="error" > -->
	<!-- <appender-ref ref="error" /> -->
	<!-- </logger> -->
	<!-- <logger name="com" level="ERROR" additivty="true"> -->
	<!-- <appender-ref ref="errorlog" /> -->
	<!-- </logger> -->
	<!-- 根日志,所有logger默认继承自root，打印信息向上级传递，所以以上logger所打印的日志默认被 STDOUT appender再处理一遍， 
		也就是会被打印到控制台，可以再通过设置logger的additivity="false"，使得不再向上传递 -->
	<!-- ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
	<root level="INFO">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="runtime" />
		<appender-ref ref="errorlog" />
	</root>

</configuration>