<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:solr="http://www.springframework.org/schema/data/solr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop
        	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/data/solr
  	http://www.springframework.org/schema/data/solr/spring-solr.xsd"
	default-lazy-init="true"><!-- 懒加载 default-lazy-init="true" -->

	<!-- 通过mvc:resources设置静态资源，这样servlet就会处理这些静态资源，而不通过控制器 -->
	<!-- 设置不过滤内容，比如:css,jquery,img 等资源文件 -->
	<mvc:resources location="/*.html" mapping="/**.html" />
	<mvc:resources location="/css/*" mapping="/css/**" />
	<mvc:resources location="/js/*" mapping="/js/**" />
	<mvc:resources location="/images/*" mapping="/images/**" />

	<!-- 使用Annotation自动注册Bean,扫描@Controller和@ControllerAdvice -->
	<!-- base-package 如果多个，用“,”分隔 -->
	<context:component-scan base-package="com.controller" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" /> -->
		<!--控制器增强，使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常 -->
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<!-- 添加注解驱动 -->
	<mvc:annotation-driven>
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 默认扫描的包路径 -->
	<!-- <context:component-scan base-package="com.*" /> -->
	<!-- 启动对@AspectJ注解的支持 -->
	<!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 
		就走JDK代理，如果没有，走cglib代理 -->
	<!-- 注：对于单利模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->
	<!-- <context:annotation-config /> -->
	<!--如果不写proxy-target-class="true"这句话也没问题 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- mvc:view-controller可以在不需要Controller处理request的情况，转向到设置的View -->
	<!-- 像下面这样设置，如果请求为/，则不通过controller，而直接解析为/index.jsp -->
<!-- 	<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"> -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<mvc:default-servlet-handler />

	<mvc:cors>
		<mvc:mapping path="/**" allow-credentials="true" allowed-headers="*" allowed-origins="*"
			allowed-methods="GET,POST,DELETE,PUT" />
		<!-- <mvc:mapping path="/api/**" -->
		<!-- allowed-origins="http://domain1.com, http://domain2.com" -->
		<!-- allowed-methods="GET, PUT" -->
		<!-- allowed-headers="header1, header2, header3" -->
		<!-- exposed-headers="header1, header2" allow-credentials="false" -->
		<!-- max-age="123" /> -->

		<!-- <mvc:mapping path="/resources/**" -->
		<!-- allowed-origins="http://domain1.com" /> -->
	</mvc:cors>
	<!-- Log自定义注解拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/resources/**" />
			<bean class="com.core.interceptor.LogInterceptor"></bean>
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/activity/**" />
			<bean class="com.core.interceptor.AccessLimitInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- solr服务器地址 -->
	<!-- <solr:solr-server id="solrServer" url="${solr.server}" /> -->
	<!-- solr模板，使用solr模板可对索引库进行CRUD的操作 -->
	<!-- <bean id="solrTemplate" class="org.springframework.data.solr.core.SolrTemplate"> -->
	<!-- <constructor-arg ref="solrServer" /> -->
	<!-- </bean> -->
	<bean id="swaggerui" class="com.config.SwaggerConfig"></bean>
	<mvc:resources order="-10" location="classpath:/META-INF/resources/" mapping="swagger-ui.html"/>
	<mvc:resources order="-10" location="classpath:/META-INF/resources/webjars/" mapping="/webjars/**"/>
	<!-- <import resource="spring-redis.xml"/> -->
	<!-- <import resource="memcache.xml"/> -->
</beans>