<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:solr="http://www.springframework.org/schema/data/solr"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd 
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/cache  
	http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/data/solr
  	http://www.springframework.org/schema/data/solr/spring-solr.xsd
  	http://www.springframework.org/schema/security 
  	http://www.springframework.org/schema/security/spring-security.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>

	<!-- <bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName"
			value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:application.properties</value>
			</list>
		</property>
	</bean> -->
	<context:property-placeholder location="classpath*:application.properties" ignore-resource-not-found="true"/>
	<!-- <context:annotation-config /> -->
	<!--ControllerAdvice控制器增强，使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常 -->
	<!-- <context:component-scan base-package="com.*" /> -->
	<context:component-scan base-package="com">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
<!-- 		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Component"/> -->
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	<aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true"/>


	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<!-- <cache:annotation-driven cache-manager="ehcacheManager" /> -->

	<!-- cacheManager工厂类，指定ehcache.xml的位置 -->
	<bean id="ehcacheManagerFactory"
	class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>

	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
	<property name="cacheManager" ref="ehcacheManagerFactory" />
	</bean>
	
	<bean id="simpleCacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
                    <property name="name" value="default"/>
                </bean>
                <bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean">
                    <property name="name" value="accountCache"/>
                </bean>
            </set>
        </property>
    </bean>
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
	<!-- <property name="jndiName"> -->
	<!-- <value>jdbc/ds</value> -->
	<!-- <value>java:comp/env/jdbc/ds</value> -->
	<!-- </property> -->
	<!-- </bean> -->
	<!-- 配置数据源 sql地址通过注解参数不知为何无效 -->
	<!-- <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close"> 
		<property name="poolName" value="master" /> <property name="driverClassName" 
		value="${jdbc.driver}" /> <property name="jdbcUrl" value="${jdbc.url}" /> 
		<property name="username" value="${jdbc.username}" /> <property name="password" 
		value="${jdbc.password}" /> <property name="maximumPoolSize" value="32" /> 
		</bean> -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<property name="poolName" value="master" />
		<property name="driverClassName"
			value="com.mysql.cj.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;allowPublicKeyRetrieval=true&amp;rewriteBatchedStatements=true" />
		<property name="username" value="test" />
		<property name="password" value="123456" />
		<property name="maximumPoolSize" value="32" />
	</bean>
	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 使用annotation注解方式配置事务 -->
	<tx:annotation-driven
		transaction-manager="transactionManager" proxy-target-class="true" />

<!-- 	<mvc:annotation-driven validator="validator" /> -->

	<!--不设置validationMessageSource则默认为classpath下的ValidationMessages.properties -->
<!-- 	<bean id="validator" -->
<!-- 		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"> -->
<!-- 		<property name="providerClass" -->
<!-- 			value="org.hibernate.validator.HibernateValidator" /> -->
		
<!-- 		<property name="validationMessageSource" -->
<!-- 			ref="validatemessageSource" /> -->
<!-- 	</bean> -->
<!-- 	<bean id="validatemessageSource" -->
<!-- 		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"> -->
<!-- 		<property name="basename" value="classpath*:validatemessages" /> -->
<!-- 		<property name="fileEncodings" value="utf-8" /> -->
<!-- 		<property name="cacheSeconds" value="120" /> -->
<!-- 	</bean> -->
	<!-- 配置Jdbc模板 -->
	<bean id="jdbcTemplate"
		class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<bean id="njdbcTemplate"
		class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- the maximum size of an uploaded file in bytes -->
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="10485760000"></property>
		<property name="maxInMemorySize" value="40960"></property>
	</bean>

	<!-- solr服务器地址 -->
	<solr:solr-server id="solrServer" url="${solr.server}" />
	<!-- solr模板，使用solr模板可对索引库进行CRUD的操作 -->
	<bean id="solrTemplate"
		class="org.springframework.data.solr.core.SolrTemplate"
		scope="singleton">
		<!-- <constructor-arg ref="solrServer" /> -->
		<constructor-arg ref="cloudSolrServer" />
	</bean>
	<bean name="sTemplate"
		class="org.springframework.data.solr.core.SolrTemplate"
		scope="singleton">
		<constructor-arg ref="solrServer" />
	</bean>
	<bean id="sClient" name="sClient" class="com.common.solr.SolrClient">
		<constructor-arg name="url" value="${solr.server}" />
	</bean>

	<bean id="cloudSolrServer"
		class="org.apache.solr.client.solrj.impl.CloudSolrServer">
		<constructor-arg name="zkHost"
			value="${solr.zkserver}"></constructor-arg>
		<property name="defaultCollection" value="itemcore"></property>
	</bean>

	<!--方式一、使用jdk的实现 -->
	<bean id="ky.requestFactory"
		class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<property name="readTimeout" value="10000" />
		<property name="connectTimeout" value="5000" />
	</bean>

	<bean id="simpleRestTemplate"
		class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="ky.requestFactory" />
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.FormHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!--方式二、使用httpclient的实现，带连接池 -->
	<bean id="ky.pollingConnectionManager"
		class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager">
		<!--整个连接池的并发 -->
		<property name="maxTotal" value="1000" />
		<!--每个主机的并发 -->
		<property name="defaultMaxPerRoute" value="1000" />
	</bean>

	<bean id="ky.httpClientBuilder"
		class="org.apache.http.impl.client.HttpClientBuilder"
		factory-method="create">
		<property name="connectionManager"
			ref="ky.pollingConnectionManager" />
		<!--开启重试 -->
		<property name="retryHandler">
			<bean
				class="org.apache.http.impl.client.DefaultHttpRequestRetryHandler">
				<constructor-arg value="2" />
				<constructor-arg value="true" />
			</bean>
		</property>
		<property name="defaultHeaders">
			<list>
				<bean class="org.apache.http.message.BasicHeader">
					<constructor-arg value="User-Agent" />
					<constructor-arg
						value="Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36" />
				</bean>
				<bean class="org.apache.http.message.BasicHeader">
					<constructor-arg value="Accept-Encoding" />
					<constructor-arg value="gzip,deflate" />
				</bean>
				<bean class="org.apache.http.message.BasicHeader">
					<constructor-arg value="Accept-Language" />
					<constructor-arg value="zh-CN" />
				</bean>
			</list>
		</property>
	</bean>

<!--     <task:annotation-driven executor="asyncExecutor" /> -->
<!--     <task:executor id="asyncExecutor" pool-size="100-10000" queue-capacity="10"/> -->
      

	<bean id="ky.httpClient" factory-bean="ky.httpClientBuilder"
		factory-method="build" />

	<bean id="ky.clientHttpRequestFactory"
		class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
		<constructor-arg ref="ky.httpClient" />
		<!--连接超时时间，毫秒 -->
		<property name="connectTimeout" value="5000" />
		<!--读写超时时间，毫秒 -->
		<property name="readTimeout" value="10000" />
	</bean>
	<bean id="restTemplate"
		class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="ky.clientHttpRequestFactory" />
		<property name="errorHandler">
			<bean
				class="org.springframework.web.client.DefaultResponseErrorHandler" />
		</property>
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.FormHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="jobFactory" class="com.common.quartz.JobFactory"></bean>
	<bean id="schedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobFactory" ref="jobFactory"></property>
	</bean>
	
	<!-- 使用Kaptcha生成验证码 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">yes</prop>  
                        <prop key="kaptcha.border.color">105,179,90</prop>  
                        <prop key="kaptcha.textproducer.font.color">blue</prop>  
                        <prop key="kaptcha.image.width">125</prop>  
                        <prop key="kaptcha.image.height">60</prop>  
                        <prop key="kaptcha.textproducer.font.size">40</prop>  
                        <prop key="kaptcha.session.key">code</prop>  
                        <prop key="kaptcha.textproducer.char.length">4</prop>  
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>  
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
	
<!-- 	<import resource="spring-aop.xml" /> -->
<!-- 	<import resource="spring-activemq.xml" /> -->
<!-- 	<import resource="spring-redis.xml" /> -->
<!-- 	<import resource="memcache.xml" /> -->
<!-- 	<import resource="spring-drools.xml" /> -->

</beans>